// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=137,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=1597,HLS_SYN_LUT=1930,HLS_VERSION=2018_3}" *)

module matrixmul (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state26 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] A;
wire   [31:0] B;
wire   [31:0] out_r;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_653;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] exitcond_flatten_reg_653_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_flatten_reg_653_pp0_iter2_reg;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [3:0] indvar_flatten_reg_242;
reg   [1:0] i_reg_253;
reg   [2:0] j_reg_264;
wire   [30:0] tmp_cast_fu_285_p1;
reg   [30:0] tmp_cast_reg_628;
wire   [30:0] tmp_1_cast_fu_299_p1;
reg   [30:0] tmp_1_cast_reg_633;
wire   [63:0] tmp_4_fu_313_p1;
reg   [63:0] tmp_4_reg_641;
wire   [30:0] tmp_4_cast_fu_317_p1;
reg   [30:0] tmp_4_cast_reg_648;
wire   [0:0] exitcond_flatten_fu_321_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state10_io;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] indvar_flatten_next_fu_327_p2;
reg   [3:0] indvar_flatten_next_reg_657;
wire   [2:0] j_mid2_fu_345_p3;
reg   [2:0] j_mid2_reg_662;
wire   [1:0] tmp_mid2_v_fu_353_p3;
reg   [1:0] tmp_mid2_v_reg_670;
wire   [3:0] tmp_5_fu_361_p3;
reg   [3:0] tmp_5_reg_676;
wire   [30:0] A2_sum_fu_373_p2;
reg   [30:0] A2_sum_reg_684;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_state19_pp0_stage1_iter2;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_state19_io;
reg    ap_block_pp0_stage1_11001;
wire   [30:0] B4_sum_fu_391_p2;
reg   [30:0] B4_sum_reg_695;
reg   [31:0] gmem_addr_1_reg_700;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_state20_pp0_stage2_iter2;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state20_io;
reg    ap_block_pp0_stage2_11001;
wire   [30:0] B4_sum1_fu_443_p2;
reg   [30:0] B4_sum1_reg_712;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
reg    ap_block_state13_pp0_stage3_iter1;
wire    ap_block_state21_pp0_stage3_iter2;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] gmem_addr_2_reg_717;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_state6_io;
reg    ap_block_state14_pp0_stage4_iter1;
wire    ap_block_state22_pp0_stage4_iter2;
reg    ap_block_pp0_stage4_11001;
wire   [4:0] tmp_2_cast1_fu_482_p1;
reg   [4:0] tmp_2_cast1_reg_729;
wire    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_state7_io;
reg    ap_block_state15_pp0_stage5_iter1;
wire    ap_block_state23_pp0_stage5_iter2;
reg    ap_block_pp0_stage5_11001;
wire   [30:0] B4_sum2_fu_495_p2;
reg   [30:0] B4_sum2_reg_735;
reg   [31:0] gmem_addr_3_reg_740;
wire    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_state8_io;
reg    ap_block_state16_pp0_stage6_iter1;
wire    ap_block_state24_pp0_stage6_iter2;
reg    ap_block_pp0_stage6_11001;
wire   [30:0] B4_sum3_fu_555_p2;
reg   [30:0] B4_sum3_reg_752;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_state9_io;
reg    ap_block_state17_pp0_stage7_iter1;
reg    ap_block_state25_pp0_stage7_iter2;
reg    ap_block_pp0_stage7_11001;
wire   [4:0] tmp_15_fu_560_p2;
reg   [4:0] tmp_15_reg_757;
reg   [4:0] tmp_15_reg_757_pp0_iter1_reg;
wire   [2:0] j_1_fu_565_p2;
reg   [2:0] j_1_reg_762;
reg  signed [31:0] gmem_addr_read_reg_773;
reg  signed [31:0] gmem_addr_4_read_reg_778;
wire   [31:0] tmp_6_fu_580_p2;
reg   [31:0] tmp_6_reg_783;
reg  signed [31:0] gmem_addr_1_read_reg_788;
reg  signed [31:0] gmem_addr_5_read_reg_793;
wire   [31:0] tmp_6_1_fu_584_p2;
reg   [31:0] tmp_6_1_reg_798;
reg  signed [31:0] gmem_addr_2_read_reg_803;
reg  signed [31:0] gmem_addr_6_read_reg_808;
wire   [31:0] tmp_6_2_fu_588_p2;
reg   [31:0] tmp_6_2_reg_813;
reg  signed [31:0] gmem_addr_3_read_reg_818;
reg  signed [31:0] gmem_addr_7_read_reg_823;
wire   [30:0] out6_sum_fu_595_p2;
reg   [30:0] out6_sum_reg_828;
wire   [31:0] tmp_6_3_fu_600_p2;
reg   [31:0] tmp_6_3_reg_833;
wire   [31:0] tmp_1_3_fu_622_p2;
reg   [31:0] tmp_1_3_reg_844;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_246_p4;
reg   [1:0] ap_phi_mux_i_phi_fu_257_p4;
reg   [2:0] ap_phi_mux_j_phi_fu_268_p4;
wire   [63:0] A2_sum_cast_fu_378_p1;
wire   [63:0] A2_sum7_fu_409_p2;
wire   [63:0] B4_sum_cast_fu_420_p1;
wire   [63:0] A2_sum8_fu_461_p2;
wire   [63:0] B4_sum1_cast_fu_472_p1;
wire   [63:0] A2_sum9_fu_513_p2;
wire   [63:0] B4_sum2_cast_fu_524_p1;
wire   [63:0] B4_sum3_cast_fu_570_p1;
wire   [63:0] out6_sum_cast_fu_604_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage4_01001;
reg    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage6_01001;
reg    ap_block_pp0_stage7_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire   [29:0] tmp_fu_275_p4;
wire   [29:0] tmp_1_fu_289_p4;
wire   [29:0] A1_fu_303_p4;
wire   [0:0] exitcond_fu_339_p2;
wire   [1:0] i_1_fu_333_p2;
wire   [30:0] tmp_7_cast_fu_369_p1;
wire   [30:0] tmp_2_cast_fu_388_p1;
wire   [3:0] tmp_8_fu_396_p2;
wire   [63:0] tmp_9_fu_401_p3;
wire   [3:0] tmp_2_cast2_fu_430_p1;
wire   [3:0] tmp_12_fu_433_p2;
wire   [30:0] tmp_16_cast_fu_439_p1;
wire   [3:0] tmp_s_fu_448_p2;
wire   [63:0] tmp_2_fu_453_p3;
wire   [4:0] tmp_13_fu_485_p2;
wire   [30:0] tmp_17_cast_fu_491_p1;
wire   [3:0] tmp_7_fu_500_p2;
wire   [63:0] tmp_10_fu_505_p3;
wire   [4:0] tmp_7_cast1_fu_537_p1;
wire   [4:0] tmp_mid2_cast_fu_534_p1;
wire   [4:0] tmp_14_fu_546_p2;
wire   [30:0] tmp_18_cast_fu_551_p1;
wire   [4:0] tmp_11_fu_540_p2;
wire   [30:0] tmp_19_cast_fu_592_p1;
wire   [31:0] tmp2_fu_618_p2;
wire   [31:0] tmp1_fu_614_p2;
wire    ap_CS_fsm_state26;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1023;
reg    ap_condition_1027;
reg    ap_condition_613;
reg    ap_condition_624;
reg    ap_condition_636;
reg    ap_condition_648;
reg    ap_condition_660;
reg    ap_condition_672;
reg    ap_condition_685;
reg    ap_condition_696;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

matrixmul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrixmul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .A(A),
    .B(B),
    .out_r(out_r)
);

matrixmul_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
matrixmul_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_1_3_reg_844),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage6_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (gmem_ARREADY == 1'b1) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_01001) & (gmem_ARREADY == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1023)) begin
            if ((1'b0 == ap_block_pp0_stage1_11001)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage1_01001) & (gmem_AWREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1027)) begin
            if ((1'b0 == ap_block_pp0_stage2_11001)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage2_01001) & (gmem_WREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        i_reg_253 <= tmp_mid2_v_reg_670;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_253 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        indvar_flatten_reg_242 <= indvar_flatten_next_reg_657;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_242 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        j_reg_264 <= j_1_reg_762;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_264 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_321_p2 == 1'd0))) begin
        A2_sum_reg_684 <= A2_sum_fu_373_p2;
        j_mid2_reg_662 <= j_mid2_fu_345_p3;
        tmp_5_reg_676[3 : 2] <= tmp_5_fu_361_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_653 == 1'd0))) begin
        B4_sum1_reg_712 <= B4_sum1_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_653 == 1'd0))) begin
        B4_sum2_reg_735 <= B4_sum2_fu_495_p2;
        tmp_2_cast1_reg_729[2 : 0] <= tmp_2_cast1_fu_482_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653 == 1'd0))) begin
        B4_sum3_reg_752 <= B4_sum3_fu_555_p2;
        tmp_15_reg_757 <= tmp_15_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_653 == 1'd0))) begin
        B4_sum_reg_695 <= B4_sum_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_653 <= exitcond_flatten_fu_321_p2;
        exitcond_flatten_reg_653_pp0_iter1_reg <= exitcond_flatten_reg_653;
        exitcond_flatten_reg_653_pp0_iter2_reg <= exitcond_flatten_reg_653_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_1_read_reg_788 <= gmem_RDATA;
        tmp_6_reg_783 <= tmp_6_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653 == 1'd0))) begin
        gmem_addr_1_reg_700 <= A2_sum7_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_2_read_reg_803 <= gmem_RDATA;
        tmp_6_1_reg_798 <= tmp_6_1_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_653 == 1'd0))) begin
        gmem_addr_2_reg_717 <= A2_sum8_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_3_read_reg_818 <= gmem_RDATA;
        tmp_6_2_reg_813 <= tmp_6_2_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_653 == 1'd0))) begin
        gmem_addr_3_reg_740 <= A2_sum9_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_4_read_reg_778 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_5_read_reg_793 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_6_read_reg_808 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_7_read_reg_823 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        gmem_addr_read_reg_773 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_657 <= indvar_flatten_next_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653 == 1'd0))) begin
        j_1_reg_762 <= j_1_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0))) begin
        out6_sum_reg_828 <= out6_sum_fu_595_p2;
        tmp_6_3_reg_833 <= tmp_6_3_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_15_reg_757_pp0_iter1_reg <= tmp_15_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        tmp_1_3_reg_844 <= tmp_1_3_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1_cast_reg_633[29 : 0] <= tmp_1_cast_fu_299_p1[29 : 0];
        tmp_4_cast_reg_648[29 : 0] <= tmp_4_cast_fu_317_p1[29 : 0];
        tmp_4_reg_641[29 : 0] <= tmp_4_fu_313_p1[29 : 0];
        tmp_cast_reg_628[29 : 0] <= tmp_cast_fu_285_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_321_p2 == 1'd0))) begin
        tmp_mid2_v_reg_670 <= tmp_mid2_v_fu_353_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_321_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_257_p4 = tmp_mid2_v_reg_670;
    end else begin
        ap_phi_mux_i_phi_fu_257_p4 = i_reg_253;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_246_p4 = indvar_flatten_next_reg_657;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_246_p4 = indvar_flatten_reg_242;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        ap_phi_mux_j_phi_fu_268_p4 = j_1_reg_762;
    end else begin
        ap_phi_mux_j_phi_fu_268_p4 = j_reg_264;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        if ((1'b1 == ap_condition_696)) begin
            gmem_ARADDR = B4_sum3_cast_fu_570_p1;
        end else if ((1'b1 == ap_condition_685)) begin
            gmem_ARADDR = gmem_addr_3_reg_740;
        end else if ((1'b1 == ap_condition_672)) begin
            gmem_ARADDR = B4_sum2_cast_fu_524_p1;
        end else if ((1'b1 == ap_condition_660)) begin
            gmem_ARADDR = gmem_addr_2_reg_717;
        end else if ((1'b1 == ap_condition_648)) begin
            gmem_ARADDR = B4_sum1_cast_fu_472_p1;
        end else if ((1'b1 == ap_condition_636)) begin
            gmem_ARADDR = gmem_addr_1_reg_700;
        end else if ((1'b1 == ap_condition_624)) begin
            gmem_ARADDR = B4_sum_cast_fu_420_p1;
        end else if ((1'b1 == ap_condition_613)) begin
            gmem_ARADDR = A2_sum_cast_fu_378_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (exitcond_flatten_reg_653 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (exitcond_flatten_reg_653 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (exitcond_flatten_reg_653 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (exitcond_flatten_reg_653 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_653 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (exitcond_flatten_reg_653 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_653 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((~((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A1_fu_303_p4 = {{A[31:2]}};

assign A2_sum7_fu_409_p2 = (tmp_9_fu_401_p3 + tmp_4_reg_641);

assign A2_sum8_fu_461_p2 = (tmp_2_fu_453_p3 + tmp_4_reg_641);

assign A2_sum9_fu_513_p2 = (tmp_10_fu_505_p3 + tmp_4_reg_641);

assign A2_sum_cast_fu_378_p1 = A2_sum_reg_684;

assign A2_sum_fu_373_p2 = (tmp_7_cast_fu_369_p1 + tmp_4_cast_reg_648);

assign B4_sum1_cast_fu_472_p1 = B4_sum1_reg_712;

assign B4_sum1_fu_443_p2 = (tmp_16_cast_fu_439_p1 + tmp_1_cast_reg_633);

assign B4_sum2_cast_fu_524_p1 = B4_sum2_reg_735;

assign B4_sum2_fu_495_p2 = (tmp_17_cast_fu_491_p1 + tmp_1_cast_reg_633);

assign B4_sum3_cast_fu_570_p1 = B4_sum3_reg_752;

assign B4_sum3_fu_555_p2 = (tmp_18_cast_fu_551_p1 + tmp_1_cast_reg_633);

assign B4_sum_cast_fu_420_p1 = B4_sum_reg_695;

assign B4_sum_fu_391_p2 = (tmp_2_cast_fu_388_p1 + tmp_1_cast_reg_633);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653 == 1'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state10_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage4_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage5_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage6_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage7_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter1_reg == 1'd0));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0));
end

assign ap_block_state19_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0));
end

assign ap_block_state20_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp0_stage7_iter2 = ((gmem_BVALID == 1'b0) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond_flatten_reg_653 == 1'd0));
end

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1023 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1027 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_653_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_condition_613 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_624 = ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_636 = ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_648 = ((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_condition_660 = ((1'b0 == ap_block_pp0_stage5_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5));
end

always @ (*) begin
    ap_condition_672 = ((1'b0 == ap_block_pp0_stage6_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6));
end

always @ (*) begin
    ap_condition_685 = ((1'b0 == ap_block_pp0_stage7_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7));
end

always @ (*) begin
    ap_condition_696 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_flatten_fu_321_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_246_p4 == 4'd15) ? 1'b1 : 1'b0);

assign exitcond_fu_339_p2 = ((ap_phi_mux_j_phi_fu_268_p4 == 3'd5) ? 1'b1 : 1'b0);

assign gmem_AWADDR = out6_sum_cast_fu_604_p1;

assign i_1_fu_333_p2 = (ap_phi_mux_i_phi_fu_257_p4 + 2'd1);

assign indvar_flatten_next_fu_327_p2 = (ap_phi_mux_indvar_flatten_phi_fu_246_p4 + 4'd1);

assign j_1_fu_565_p2 = (j_mid2_reg_662 + 3'd1);

assign j_mid2_fu_345_p3 = ((exitcond_fu_339_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_j_phi_fu_268_p4);

assign out6_sum_cast_fu_604_p1 = out6_sum_reg_828;

assign out6_sum_fu_595_p2 = (tmp_19_cast_fu_592_p1 + tmp_cast_reg_628);

assign tmp1_fu_614_p2 = (tmp_6_reg_783 + tmp_6_1_reg_798);

assign tmp2_fu_618_p2 = (tmp_6_2_reg_813 + tmp_6_3_reg_833);

assign tmp_10_fu_505_p3 = {{60'd0}, {tmp_7_fu_500_p2}};

assign tmp_11_fu_540_p2 = (tmp_7_cast1_fu_537_p1 + tmp_mid2_cast_fu_534_p1);

assign tmp_12_fu_433_p2 = (tmp_2_cast2_fu_430_p1 + 4'd5);

assign tmp_13_fu_485_p2 = (tmp_2_cast1_fu_482_p1 + 5'd10);

assign tmp_14_fu_546_p2 = (tmp_2_cast1_reg_729 + 5'd15);

assign tmp_15_fu_560_p2 = (tmp_2_cast1_reg_729 + tmp_11_fu_540_p2);

assign tmp_16_cast_fu_439_p1 = tmp_12_fu_433_p2;

assign tmp_17_cast_fu_491_p1 = tmp_13_fu_485_p2;

assign tmp_18_cast_fu_551_p1 = tmp_14_fu_546_p2;

assign tmp_19_cast_fu_592_p1 = tmp_15_reg_757_pp0_iter1_reg;

assign tmp_1_3_fu_622_p2 = (tmp2_fu_618_p2 + tmp1_fu_614_p2);

assign tmp_1_cast_fu_299_p1 = tmp_1_fu_289_p4;

assign tmp_1_fu_289_p4 = {{B[31:2]}};

assign tmp_2_cast1_fu_482_p1 = j_mid2_reg_662;

assign tmp_2_cast2_fu_430_p1 = j_mid2_reg_662;

assign tmp_2_cast_fu_388_p1 = j_mid2_reg_662;

assign tmp_2_fu_453_p3 = {{60'd0}, {tmp_s_fu_448_p2}};

assign tmp_4_cast_fu_317_p1 = A1_fu_303_p4;

assign tmp_4_fu_313_p1 = A1_fu_303_p4;

assign tmp_5_fu_361_p3 = {{tmp_mid2_v_fu_353_p3}, {2'd0}};

assign tmp_6_1_fu_584_p2 = ($signed(gmem_addr_1_read_reg_788) * $signed(gmem_addr_5_read_reg_793));

assign tmp_6_2_fu_588_p2 = ($signed(gmem_addr_2_read_reg_803) * $signed(gmem_addr_6_read_reg_808));

assign tmp_6_3_fu_600_p2 = ($signed(gmem_addr_3_read_reg_818) * $signed(gmem_addr_7_read_reg_823));

assign tmp_6_fu_580_p2 = ($signed(gmem_addr_read_reg_773) * $signed(gmem_addr_4_read_reg_778));

assign tmp_7_cast1_fu_537_p1 = tmp_5_reg_676;

assign tmp_7_cast_fu_369_p1 = tmp_5_fu_361_p3;

assign tmp_7_fu_500_p2 = (tmp_5_reg_676 | 4'd3);

assign tmp_8_fu_396_p2 = (tmp_5_reg_676 | 4'd1);

assign tmp_9_fu_401_p3 = {{60'd0}, {tmp_8_fu_396_p2}};

assign tmp_cast_fu_285_p1 = tmp_fu_275_p4;

assign tmp_fu_275_p4 = {{out_r[31:2]}};

assign tmp_mid2_cast_fu_534_p1 = tmp_mid2_v_reg_670;

assign tmp_mid2_v_fu_353_p3 = ((exitcond_fu_339_p2[0:0] === 1'b1) ? i_1_fu_333_p2 : ap_phi_mux_i_phi_fu_257_p4);

assign tmp_s_fu_448_p2 = (tmp_5_reg_676 | 4'd2);

always @ (posedge ap_clk) begin
    tmp_cast_reg_628[30] <= 1'b0;
    tmp_1_cast_reg_633[30] <= 1'b0;
    tmp_4_reg_641[63:30] <= 34'b0000000000000000000000000000000000;
    tmp_4_cast_reg_648[30] <= 1'b0;
    tmp_5_reg_676[1:0] <= 2'b00;
    tmp_2_cast1_reg_729[4:3] <= 2'b00;
end

endmodule //matrixmul
