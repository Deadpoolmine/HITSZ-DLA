-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=137,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=1597,HLS_SYN_LUT=1930,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (31 downto 0);
    signal B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal exitcond_flatten_reg_653_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_653_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_242 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_253 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_264 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_285_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_reg_628 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_cast_fu_299_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_cast_reg_633 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_641 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_317_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_cast_reg_648 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_657 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_345_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_662 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_fu_353_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_v_reg_670 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_361_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_676 : STD_LOGIC_VECTOR (3 downto 0);
    signal A2_sum_fu_373_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal A2_sum_reg_684 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter2 : BOOLEAN;
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal B4_sum_fu_391_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal B4_sum_reg_695 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem_addr_1_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter2 : BOOLEAN;
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal B4_sum1_fu_443_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal B4_sum1_reg_712 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal gmem_addr_2_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_2_cast1_fu_482_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast1_reg_729 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state15_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal B4_sum2_fu_495_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal B4_sum2_reg_735 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem_addr_3_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state16_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal B4_sum3_fu_555_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal B4_sum3_reg_752 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state17_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal tmp_15_fu_560_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_reg_757 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_reg_757_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_565_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_762 : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_addr_read_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_4_read_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_read_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_5_read_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_6_read_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_7_read_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal out6_sum_fu_595_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal out6_sum_reg_828 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_3_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_3_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_3_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_246_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_phi_fu_257_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j_phi_fu_268_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal A2_sum_cast_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A2_sum7_fu_409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal B4_sum_cast_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A2_sum8_fu_461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal B4_sum1_cast_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A2_sum9_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal B4_sum2_cast_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal B4_sum3_cast_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out6_sum_cast_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal ap_block_pp0_stage7_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal tmp_fu_275_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_289_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal A1_fu_303_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_cast_fu_369_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_cast_fu_388_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_396_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_401_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_cast2_fu_430_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_433_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_cast_fu_439_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_448_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_453_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_cast_fu_491_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_505_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast1_fu_537_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_cast_fu_534_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_cast_fu_551_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_540_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_cast_fu_592_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp2_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1023 : BOOLEAN;
    signal ap_condition_1027 : BOOLEAN;
    signal ap_condition_613 : BOOLEAN;
    signal ap_condition_624 : BOOLEAN;
    signal ap_condition_636 : BOOLEAN;
    signal ap_condition_648 : BOOLEAN;
    signal ap_condition_660 : BOOLEAN;
    signal ap_condition_672 : BOOLEAN;
    signal ap_condition_685 : BOOLEAN;
    signal ap_condition_696 : BOOLEAN;

    component matrixmul_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (31 downto 0);
        B : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    matrixmul_AXILiteS_s_axi_U : component matrixmul_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        A => A,
        B => B,
        out_r => out_r);

    matrixmul_gmem_m_axi_U : component matrixmul_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_1_3_reg_844,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (gmem_ARREADY = ap_const_logic_1) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (gmem_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_1023)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_11001)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (gmem_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_1027)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_11001)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (gmem_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
                i_reg_253 <= tmp_mid2_v_reg_670;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_253 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
                indvar_flatten_reg_242 <= indvar_flatten_next_reg_657;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_242 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
                j_reg_264 <= j_1_reg_762;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_264 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_321_p2 = ap_const_lv1_0))) then
                A2_sum_reg_684 <= A2_sum_fu_373_p2;
                j_mid2_reg_662 <= j_mid2_fu_345_p3;
                    tmp_5_reg_676(3 downto 2) <= tmp_5_fu_361_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                B4_sum1_reg_712 <= B4_sum1_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                B4_sum2_reg_735 <= B4_sum2_fu_495_p2;
                    tmp_2_cast1_reg_729(2 downto 0) <= tmp_2_cast1_fu_482_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                B4_sum3_reg_752 <= B4_sum3_fu_555_p2;
                tmp_15_reg_757 <= tmp_15_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                B4_sum_reg_695 <= B4_sum_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_653 <= exitcond_flatten_fu_321_p2;
                exitcond_flatten_reg_653_pp0_iter1_reg <= exitcond_flatten_reg_653;
                exitcond_flatten_reg_653_pp0_iter2_reg <= exitcond_flatten_reg_653_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_1_read_reg_788 <= gmem_RDATA;
                tmp_6_reg_783 <= tmp_6_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                gmem_addr_1_reg_700 <= A2_sum7_fu_409_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_2_read_reg_803 <= gmem_RDATA;
                tmp_6_1_reg_798 <= tmp_6_1_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                gmem_addr_2_reg_717 <= A2_sum8_fu_461_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_3_read_reg_818 <= gmem_RDATA;
                tmp_6_2_reg_813 <= tmp_6_2_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                gmem_addr_3_reg_740 <= A2_sum9_fu_513_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_4_read_reg_778 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_5_read_reg_793 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_6_read_reg_808 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                gmem_addr_7_read_reg_823 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                gmem_addr_read_reg_773 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_657 <= indvar_flatten_next_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                j_1_reg_762 <= j_1_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0))) then
                out6_sum_reg_828 <= out6_sum_fu_595_p2;
                tmp_6_3_reg_833 <= tmp_6_3_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                tmp_15_reg_757_pp0_iter1_reg <= tmp_15_reg_757;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then
                tmp_1_3_reg_844 <= tmp_1_3_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_1_cast_reg_633(29 downto 0) <= tmp_1_cast_fu_299_p1(29 downto 0);
                    tmp_4_cast_reg_648(29 downto 0) <= tmp_4_cast_fu_317_p1(29 downto 0);
                    tmp_4_reg_641(29 downto 0) <= tmp_4_fu_313_p1(29 downto 0);
                    tmp_cast_reg_628(29 downto 0) <= tmp_cast_fu_285_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_321_p2 = ap_const_lv1_0))) then
                tmp_mid2_v_reg_670 <= tmp_mid2_v_fu_353_p3;
            end if;
        end if;
    end process;
    tmp_cast_reg_628(30) <= '0';
    tmp_1_cast_reg_633(30) <= '0';
    tmp_4_reg_641(63 downto 30) <= "0000000000000000000000000000000000";
    tmp_4_cast_reg_648(30) <= '0';
    tmp_5_reg_676(1 downto 0) <= "00";
    tmp_2_cast1_reg_729(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_321_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_321_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_321_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    A1_fu_303_p4 <= A(31 downto 2);
    A2_sum7_fu_409_p2 <= std_logic_vector(unsigned(tmp_9_fu_401_p3) + unsigned(tmp_4_reg_641));
    A2_sum8_fu_461_p2 <= std_logic_vector(unsigned(tmp_2_fu_453_p3) + unsigned(tmp_4_reg_641));
    A2_sum9_fu_513_p2 <= std_logic_vector(unsigned(tmp_10_fu_505_p3) + unsigned(tmp_4_reg_641));
    A2_sum_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A2_sum_reg_684),64));
    A2_sum_fu_373_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_369_p1) + unsigned(tmp_4_cast_reg_648));
    B4_sum1_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B4_sum1_reg_712),64));
    B4_sum1_fu_443_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_439_p1) + unsigned(tmp_1_cast_reg_633));
    B4_sum2_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B4_sum2_reg_735),64));
    B4_sum2_fu_495_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_491_p1) + unsigned(tmp_1_cast_reg_633));
    B4_sum3_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B4_sum3_reg_752),64));
    B4_sum3_fu_555_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_551_p1) + unsigned(tmp_1_cast_reg_633));
    B4_sum_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B4_sum_reg_695),64));
    B4_sum_fu_391_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_388_p1) + unsigned(tmp_1_cast_reg_633));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state26 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(exitcond_flatten_reg_653, ap_enable_reg_pp0_iter1, gmem_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(exitcond_flatten_reg_653, ap_enable_reg_pp0_iter1, gmem_RVALID, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(exitcond_flatten_reg_653, ap_enable_reg_pp0_iter1, gmem_RVALID, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_pp0_stage1_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, gmem_RVALID, ap_block_state3_io, ap_block_state19_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, gmem_RVALID, ap_block_state3_io, ap_block_state19_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_pp0_stage2_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, gmem_RVALID, ap_block_state4_io, ap_block_state20_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, gmem_RVALID, ap_block_state4_io, ap_block_state20_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_pp0_stage3_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_pp0_stage4_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state6_io)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state6_io)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_pp0_stage5_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state7_io)
    begin
                ap_block_pp0_stage5_11001 <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state7_io)
    begin
                ap_block_pp0_stage5_subdone <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_pp0_stage6_01001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage6_11001 <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID, ap_block_state8_io)
    begin
                ap_block_pp0_stage6_subdone <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg, gmem_RVALID, gmem_BVALID)
    begin
                ap_block_pp0_stage7_01001 <= (((gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg, gmem_RVALID, gmem_BVALID, ap_block_state9_io)
    begin
                ap_block_pp0_stage7_11001 <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_653_pp0_iter1_reg, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg, gmem_RVALID, gmem_BVALID, ap_block_state9_io)
    begin
                ap_block_pp0_stage7_subdone <= (((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0)) or ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_block_state10_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state10_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond_flatten_reg_653, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;


    ap_block_state11_pp0_stage1_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state11_pp0_stage1_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state12_pp0_stage2_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state12_pp0_stage2_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state13_pp0_stage3_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state13_pp0_stage3_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state14_pp0_stage4_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state14_pp0_stage4_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state15_pp0_stage5_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state15_pp0_stage5_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state16_pp0_stage6_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state16_pp0_stage6_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state17_pp0_stage7_iter1_assign_proc : process(exitcond_flatten_reg_653_pp0_iter1_reg, gmem_RVALID)
    begin
                ap_block_state17_pp0_stage7_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(exitcond_flatten_reg_653_pp0_iter2_reg, ap_sig_ioackin_gmem_AWREADY)
    begin
                ap_block_state19_io <= ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state19_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(exitcond_flatten_reg_653_pp0_iter2_reg, ap_sig_ioackin_gmem_WREADY)
    begin
                ap_block_state20_io <= ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state20_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp0_stage7_iter2_assign_proc : process(exitcond_flatten_reg_653_pp0_iter2_reg, gmem_BVALID)
    begin
                ap_block_state25_pp0_stage7_iter2 <= ((gmem_BVALID = ap_const_logic_0) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state7_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state8_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(exitcond_flatten_reg_653, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state9_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0));
    end process;

        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1023_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg)
    begin
                ap_condition_1023 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_1027_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg)
    begin
                ap_condition_1027 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_613_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_01001)
    begin
                ap_condition_613 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_624_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_01001)
    begin
                ap_condition_624 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_636_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_01001)
    begin
                ap_condition_636 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_648_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_01001)
    begin
                ap_condition_648 <= ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_condition_660_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_01001)
    begin
                ap_condition_660 <= ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5));
    end process;


    ap_condition_672_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_01001)
    begin
                ap_condition_672 <= ((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6));
    end process;


    ap_condition_685_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_01001)
    begin
                ap_condition_685 <= ((ap_const_boolean_0 = ap_block_pp0_stage7_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7));
    end process;


    ap_condition_696_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_696 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_321_p2)
    begin
        if ((exitcond_flatten_fu_321_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_257_p4_assign_proc : process(exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_253, tmp_mid2_v_reg_670)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
            ap_phi_mux_i_phi_fu_257_p4 <= tmp_mid2_v_reg_670;
        else 
            ap_phi_mux_i_phi_fu_257_p4 <= i_reg_253;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_246_p4_assign_proc : process(exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, indvar_flatten_reg_242, indvar_flatten_next_reg_657)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_246_p4 <= indvar_flatten_next_reg_657;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_246_p4 <= indvar_flatten_reg_242;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_268_p4_assign_proc : process(exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, j_reg_264, j_1_reg_762)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
            ap_phi_mux_j_phi_fu_268_p4 <= j_1_reg_762;
        else 
            ap_phi_mux_j_phi_fu_268_p4 <= j_reg_264;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_flatten_fu_321_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_246_p4 = ap_const_lv4_F) else "0";
    exitcond_fu_339_p2 <= "1" when (ap_phi_mux_j_phi_fu_268_p4 = ap_const_lv3_5) else "0";

    gmem_ARADDR_assign_proc : process(exitcond_flatten_reg_653, gmem_addr_1_reg_700, gmem_addr_2_reg_717, gmem_addr_3_reg_740, A2_sum_cast_fu_378_p1, B4_sum_cast_fu_420_p1, B4_sum1_cast_fu_472_p1, B4_sum2_cast_fu_524_p1, B4_sum3_cast_fu_570_p1, ap_reg_ioackin_gmem_ARREADY, ap_condition_613, ap_condition_624, ap_condition_636, ap_condition_648, ap_condition_660, ap_condition_672, ap_condition_685, ap_condition_696)
    begin
        if (((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
            if ((ap_const_boolean_1 = ap_condition_696)) then 
                gmem_ARADDR <= B4_sum3_cast_fu_570_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_685)) then 
                gmem_ARADDR <= gmem_addr_3_reg_740;
            elsif ((ap_const_boolean_1 = ap_condition_672)) then 
                gmem_ARADDR <= B4_sum2_cast_fu_524_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_660)) then 
                gmem_ARADDR <= gmem_addr_2_reg_717;
            elsif ((ap_const_boolean_1 = ap_condition_648)) then 
                gmem_ARADDR <= B4_sum1_cast_fu_472_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_636)) then 
                gmem_ARADDR <= gmem_addr_1_reg_700;
            elsif ((ap_const_boolean_1 = ap_condition_624)) then 
                gmem_ARADDR <= B4_sum_cast_fu_420_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_613)) then 
                gmem_ARADDR <= A2_sum_cast_fu_378_p1(32 - 1 downto 0);
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_reg_ioackin_gmem_ARREADY, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001, ap_block_pp0_stage6_01001, ap_block_pp0_stage7_01001, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWADDR <= out6_sum_cast_fu_604_p1(32 - 1 downto 0);

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg, ap_block_pp0_stage1_01001, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, exitcond_flatten_reg_653_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg, ap_block_pp0_stage2_01001, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_653 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, exitcond_flatten_reg_653, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, exitcond_flatten_reg_653_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (exitcond_flatten_reg_653_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_enable_reg_pp0_iter2, exitcond_flatten_reg_653_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (exitcond_flatten_reg_653_pp0_iter2_reg = ap_const_lv1_0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_1_fu_333_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_257_p4) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_327_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_246_p4) + unsigned(ap_const_lv4_1));
    j_1_fu_565_p2 <= std_logic_vector(unsigned(j_mid2_reg_662) + unsigned(ap_const_lv3_1));
    j_mid2_fu_345_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_339_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_268_p4;
    out6_sum_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out6_sum_reg_828),64));
    out6_sum_fu_595_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_592_p1) + unsigned(tmp_cast_reg_628));
    tmp1_fu_614_p2 <= std_logic_vector(unsigned(tmp_6_reg_783) + unsigned(tmp_6_1_reg_798));
    tmp2_fu_618_p2 <= std_logic_vector(unsigned(tmp_6_2_reg_813) + unsigned(tmp_6_3_reg_833));
    tmp_10_fu_505_p3 <= (ap_const_lv60_0 & tmp_7_fu_500_p2);
    tmp_11_fu_540_p2 <= std_logic_vector(unsigned(tmp_7_cast1_fu_537_p1) + unsigned(tmp_mid2_cast_fu_534_p1));
    tmp_12_fu_433_p2 <= std_logic_vector(unsigned(tmp_2_cast2_fu_430_p1) + unsigned(ap_const_lv4_5));
    tmp_13_fu_485_p2 <= std_logic_vector(unsigned(tmp_2_cast1_fu_482_p1) + unsigned(ap_const_lv5_A));
    tmp_14_fu_546_p2 <= std_logic_vector(unsigned(tmp_2_cast1_reg_729) + unsigned(ap_const_lv5_F));
    tmp_15_fu_560_p2 <= std_logic_vector(unsigned(tmp_2_cast1_reg_729) + unsigned(tmp_11_fu_540_p2));
    tmp_16_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_433_p2),31));
    tmp_17_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_485_p2),31));
    tmp_18_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_546_p2),31));
    tmp_19_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_757_pp0_iter1_reg),31));
    tmp_1_3_fu_622_p2 <= std_logic_vector(unsigned(tmp2_fu_618_p2) + unsigned(tmp1_fu_614_p2));
    tmp_1_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_289_p4),31));
    tmp_1_fu_289_p4 <= B(31 downto 2);
    tmp_2_cast1_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_662),5));
    tmp_2_cast2_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_662),4));
    tmp_2_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_662),31));
    tmp_2_fu_453_p3 <= (ap_const_lv60_0 & tmp_s_fu_448_p2);
    tmp_4_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A1_fu_303_p4),31));
    tmp_4_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A1_fu_303_p4),64));
    tmp_5_fu_361_p3 <= (tmp_mid2_v_fu_353_p3 & ap_const_lv2_0);
    tmp_6_1_fu_584_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(gmem_addr_1_read_reg_788) * signed(gmem_addr_5_read_reg_793))), 32));
    tmp_6_2_fu_588_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(gmem_addr_2_read_reg_803) * signed(gmem_addr_6_read_reg_808))), 32));
    tmp_6_3_fu_600_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(gmem_addr_3_read_reg_818) * signed(gmem_addr_7_read_reg_823))), 32));
    tmp_6_fu_580_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(gmem_addr_read_reg_773) * signed(gmem_addr_4_read_reg_778))), 32));
    tmp_7_cast1_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_676),5));
    tmp_7_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_361_p3),31));
    tmp_7_fu_500_p2 <= (tmp_5_reg_676 or ap_const_lv4_3);
    tmp_8_fu_396_p2 <= (tmp_5_reg_676 or ap_const_lv4_1);
    tmp_9_fu_401_p3 <= (ap_const_lv60_0 & tmp_8_fu_396_p2);
    tmp_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_275_p4),31));
    tmp_fu_275_p4 <= out_r(31 downto 2);
    tmp_mid2_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_reg_670),5));
    tmp_mid2_v_fu_353_p3 <= 
        i_1_fu_333_p2 when (exitcond_fu_339_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_257_p4;
    tmp_s_fu_448_p2 <= (tmp_5_reg_676 or ap_const_lv4_2);
end behav;
